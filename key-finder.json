{
  "description": "",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 5
        }
      },
      {
        "source": {
          "exec_alias": "true",
          "node_id": 5
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": 290,
          "y": 300
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": 280,
          "y": -170
        },
        "id": 3,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": 280,
          "y": 160
        },
        "id": 4,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "async function run(input, sdk) {\n  const { request, response } = input;\n\n  const responseBody = response.getBody()?.toText();\n  if (!responseBody) {\n    sdk.console.log(\"Response body is empty\");\n    return;\n  }\n\n  // Regular expression to match key-value pairs that might represent sensitive information\n  const regex = /\\b(api_key|secret|password|access_token|bearer\\s+token|client_secret|auth_token|key|token|csrf_token|private_key|private_token|session_id|access\\s+key|api\\s+secret)\\s*[:=]\\s*([^\\s\"';,]+)/gi;\n\n  // Find all matches\n  const matches = [...responseBody.matchAll(regex)];\n\n  if (matches.length > 0) {\n    // Collect key-value pairs\n    const sensitiveInfo = matches.map(match => `${match[1]}=${match[2]}`);\n\n    // Log the sensitive information\n    sdk.console.log(`Found ${sensitiveInfo.length} unique sensitive key-value pair(s):`);\n    sensitiveInfo.forEach((info) => {\n      sdk.console.log(info);\n    });\n\n    const findingDescription = `The following sensitive key-value pairs were found:\\n\\n${sensitiveInfo.join(\"\\n\")}`;\n    await sdk.findings.create({\n      title: \"Sensitive Key-Value Pairs Found\",\n      reporter: \"SensitiveKeyValueFinder\",\n      request: request,\n      description: findingDescription,\n      severity: \"high\", // You can change severity as needed\n    });\n\n    return sensitiveInfo;\n  } else {\n    sdk.console.log(\"No sensitive key-value pairs found\");\n    return [];\n  }\n}\n\nexport { run };\n",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": 280,
          "y": 20
        },
        "id": 5,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      }
    ]
  },
  "id": "fb159112-a283-487b-b30c-f5813b3dda2e",
  "kind": "passive",
  "name": "Key Finder"
}